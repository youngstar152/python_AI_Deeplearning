# -*- coding: utf-8 -*-
"""4_error2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M-wKFkxe5fcN0BUYSqzUKZIdw2frEBAg
"""

from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import Perceptron
import numpy as np

digits = load_digits()
train_X, test_X, train_y, test_y = train_test_split(digits.data, digits.target, random_state=0, test_size=0.1)

class MyLinear:
  def __init__(self):

    #クラス数
    self.n=0
    #パターンの次元
    self.d=0
    # 重みベクトルの配列
    self.w = np.zeros((0, 1))

    # 学習用のメソッド.

  def fit(self, x_array, y_array):
    # パターンの次元の記憶
    self.d = len(x_array[0])
    # y_arrayの重複する要素を一つだけ残してできる配列の数を取得することで, クラスの数を得る.
    self.n = len(np.unique(y_array))

    # パターンの配列を拡張ベクトルの配列にする.
    train_X_ext = np.hstack((np.ones((len(x_array), 1)), x_array))
    train_y_ext = np.zeros((len(train_y), self.n))
    for i in range(self.n):
        train_y_ext[train_y == i, i] = 1
    print( train_X_ext)
    print( train_y_ext)
    self.w = (np.linalg.inv(train_X_ext.T @ train_X_ext + 0.00000001 * np.identity(self.d+1)) @ train_X_ext.T @ train_y_ext).T 
        
    # 評価用のメソッド.
  def predict(self, x_array):
    answer = []
    x_array =  np.hstack((np.ones((len(x_array), 1)), x_array))
    for x in x_array:
         # データを一個ずつ評価する
        answer.append(self._predict_single(x))
    return np.array(answer)

  # データ一個を評価するメソッド.
  def _predict_single(self, x):
      box1=[]
      for i in range(self.n):
          g = np.dot(self.w[i], x)
          box1.append(g)
      return np.argmax(box1)

# モデルの準備
models = []
models.append(MyLinear())         # ←自前線形識別クラス
models.append(Perceptron(eta0=1))
# 学習
for model in models:
    model.fit(train_X, train_y)

# 評価
all_results = []
for model in models:
    all_results.append(model.predict(test_X))

# 結果の表示
for results in all_results:
    print(accuracy_score(test_y, results))
print(all_results[0])
print(all_results[1])
# 誤差評価に基づく線形識別器とscikit-learnのパーセプトロンの結果を比較
print(all_results[0] == all_results[1])

