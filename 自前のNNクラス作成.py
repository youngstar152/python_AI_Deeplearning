# -*- coding: utf-8 -*-
"""2_mynn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jS-oqHwHu5GmIjd350e1LHAR-dmTBmaj
"""

from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import numpy as np

digits = load_digits()
train_X, test_X, train_y, test_y = train_test_split(digits.data, digits.target, random_state=0, test_size=0.1)

# モデルの準備
class NN():
    def __init__(self):
      self.x_array = np.empty(0)
      self.y_array = np.empty(0)

    def fit(self, x, y):
       # 実際の処理
       self.x_array = x
       self.y_array = y
       print(self.x_array)
       print(self.y_array)
       print(len(self.x_array))
       print(len(self.y_array))

    def predict(self, x):
       # 実際の処理
       results = []
       a=0
       for i in x:#i=test_Xのindex
         #print(self._predict_single(i))
         results.append(self._predict_single(i,a))
         a+=1
       return np.array(results)

    def _predict_single(self, x,a):#x=test_X
        length = len(self.x_array)
        #min_distance = -1
        #result = -1
        box=[]
        for index in range(length):
            distance = np.linalg.norm(x - self.x_array[index])
            box.append(distance)
        index=np.argmin(box)
        print(index)
            #if min_distance < 0 or distance < min_distance:
              #min_distance = distance
        result = self.y_array[index]
        print("result:"+str(result))
        print(test_y[a])
        return result

models = []
models.append(NN())  # ←自前NNクラス
models.append(KNeighborsClassifier(n_neighbors=1))  # ←sklearnのk-NNクラス

# 学習
for model in models:
    model.fit(train_X, train_y)  # それぞれのmodelのfitが呼び出される

# 評価
all_results = []
for model in models:
    all_results.append(model.predict(test_X))

# 結果の表示
for results in all_results:
    print(accuracy_score(test_y, results))

# 同じ結果か確認
print(all_results[0] == all_results[1])

# 結果の保存
np.savetxt("results.csv", all_results, delimiter=',', fmt="%d")



"""# 新しいセクション"""